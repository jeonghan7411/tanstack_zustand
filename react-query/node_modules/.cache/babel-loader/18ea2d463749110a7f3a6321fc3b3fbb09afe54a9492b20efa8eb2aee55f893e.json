{"ast":null,"code":"var _jsxFileName = \"/Users/bangjeonghan/Desktop/study/react/react-query/src/pages/UserList.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport UserListItem from '../component/UserListItem';\nimport { useQuery } from '@tanstack/react-query';\nimport USER_API from '../api/User';\nimport useUserStore from '../store/useUserStore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserList = () => {\n  _s();\n  const {\n    selectedUserId,\n    setSelectedUserId,\n    userData,\n    setUserData\n  } = useUserStore();\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery({\n    queryKey: ['userList'],\n    queryFn: () => USER_API.users,\n    onSuccess: data => {\n      console.log(data);\n      setUserData(data);\n    },\n    onError: error => {\n      console.error('Error fetching user list:', error);\n    }\n    //retry: 3, // 데이터를 가져오는 도중 실패했을 때 재시도할 횟수를 지정\n    // staleTime: 1000 * 60 * 5, // 5 minutes, 데이터가 \"stale\" 상태로 간주되기까지의 시간입니다. 즉, 최신 데이터로 갱신하기 전에 이 기간 동안 캐시된 데이터를 사용\n    // cacheTime: 1000 * 60 * 10, // 10 minutes, 캐시데이터 유효 시간\n  });\n  console.log(userData);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(UserListItem, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(UserList, \"Q2PgXx7CGe7hCv05dJPFlIKpVrg=\", false, function () {\n  return [useUserStore, useQuery];\n});\n_c = UserList;\nexport default UserList;\nvar _c;\n$RefreshReg$(_c, \"UserList\");","map":{"version":3,"names":["React","UserListItem","useQuery","USER_API","useUserStore","jsxDEV","_jsxDEV","UserList","_s","selectedUserId","setSelectedUserId","userData","setUserData","isLoading","error","data","queryKey","queryFn","users","onSuccess","console","log","onError","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bangjeonghan/Desktop/study/react/react-query/src/pages/UserList.jsx"],"sourcesContent":["import React from 'react'\nimport UserListItem from '../component/UserListItem'\nimport { useQuery } from '@tanstack/react-query'\nimport USER_API from '../api/User'\nimport useUserStore from '../store/useUserStore'\n\n\n\nconst UserList = () => {\n\n  const { selectedUserId, setSelectedUserId, userData,setUserData } = useUserStore();\n\n  const { isLoading,error, data} = useQuery({\n    queryKey:['userList'],\n    queryFn: () => USER_API.users,\n    onSuccess: (data) => {\n      console.log(data)\n      setUserData(data)\n    },\n    onError: (error) => {\n      console.error('Error fetching user list:', error);\n    },\n    //retry: 3, // 데이터를 가져오는 도중 실패했을 때 재시도할 횟수를 지정\n    // staleTime: 1000 * 60 * 5, // 5 minutes, 데이터가 \"stale\" 상태로 간주되기까지의 시간입니다. 즉, 최신 데이터로 갱신하기 전에 이 기간 동안 캐시된 데이터를 사용\n    // cacheTime: 1000 * 60 * 10, // 10 minutes, 캐시데이터 유효 시간\n  })\n\n  console.log(userData)\n  \n  return (\n    <div>\n\n      <UserListItem />\n    </div>\n  )\n}\n\nexport default UserList"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,2BAA2B;AACpD,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,OAAOC,QAAQ,MAAM,aAAa;AAClC,OAAOC,YAAY,MAAM,uBAAuB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAIhD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAErB,MAAM;IAAEC,cAAc;IAAEC,iBAAiB;IAAEC,QAAQ;IAACC;EAAY,CAAC,GAAGR,YAAY,CAAC,CAAC;EAElF,MAAM;IAAES,SAAS;IAACC,KAAK;IAAEC;EAAI,CAAC,GAAGb,QAAQ,CAAC;IACxCc,QAAQ,EAAC,CAAC,UAAU,CAAC;IACrBC,OAAO,EAAEA,CAAA,KAAMd,QAAQ,CAACe,KAAK;IAC7BC,SAAS,EAAGJ,IAAI,IAAK;MACnBK,OAAO,CAACC,GAAG,CAACN,IAAI,CAAC;MACjBH,WAAW,CAACG,IAAI,CAAC;IACnB,CAAC;IACDO,OAAO,EAAGR,KAAK,IAAK;MAClBM,OAAO,CAACN,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;IACA;IACA;IACA;EACF,CAAC,CAAC;EAEFM,OAAO,CAACC,GAAG,CAACV,QAAQ,CAAC;EAErB,oBACEL,OAAA;IAAAiB,QAAA,eAEEjB,OAAA,CAACL,YAAY;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAEV,CAAC;AAAAnB,EAAA,CA3BKD,QAAQ;EAAA,QAEwDH,YAAY,EAE/CF,QAAQ;AAAA;AAAA0B,EAAA,GAJrCrB,QAAQ;AA6Bd,eAAeA,QAAQ;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}